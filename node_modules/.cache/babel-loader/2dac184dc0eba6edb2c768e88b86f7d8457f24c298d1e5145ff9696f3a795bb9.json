{"ast":null,"code":"\"use strict\";\n\nvar oneDigit = [\"\\u0635\\u0641\\u0631\", \"\\u06CC\\u06A9\", \"\\u062F\\u0648\", \"\\u0633\\u0647\", \"\\u0686\\u0647\\u0627\\u0631\", \"\\u067E\\u0646\\u062C\", \"\\u0634\\u0634\", \"\\u0647\\u0641\\u062A\", \"\\u0647\\u0634\\u062A\", \"\\u0646\\u0647\"],\n  twoDigits = {\n    10: \"\\u062F\\u0647\",\n    11: \"\\u06CC\\u0627\\u0632\\u062F\\u0647\",\n    12: \"\\u062F\\u0648\\u0627\\u0632\\u062F\\u0647\",\n    13: \"\\u0633\\u06CC\\u0632\\u062F\\u0647\",\n    14: \"\\u0686\\u0647\\u0627\\u0631\\u062F\\u0647\",\n    15: \"\\u067E\\u0627\\u0646\\u0632\\u062F\\u0647\",\n    16: \"\\u0634\\u0627\\u0646\\u0632\\u062F\\u0647\",\n    17: \"\\u0647\\u0641\\u062F\\u0647\",\n    18: \"\\u0647\\u062C\\u062F\\u0647\",\n    19: \"\\u0646\\u0648\\u0632\\u062F\\u0647\",\n    20: \"\\u0628\\u06CC\\u0633\\u062A\",\n    30: \"\\u0633\\u06CC\",\n    40: \"\\u0686\\u0647\\u0644\",\n    50: \"\\u067E\\u0646\\u062C\\u0627\\u0647\",\n    60: \"\\u0634\\u0635\\u062A\",\n    70: \"\\u0647\\u0641\\u062A\\u0627\\u062F\",\n    80: \"\\u0647\\u0634\\u062A\\u0627\\u062F\",\n    90: \"\\u0646\\u0648\\u062F\"\n  },\n  threeDigits = {\n    100: \"\\u0635\\u062F\",\n    200: \"\\u062F\\u0648\\u06CC\\u0633\\u062A\",\n    300: \"\\u0633\\u06CC\\u0635\\u062F\",\n    400: \"\\u0686\\u0647\\u0627\\u0631\\u0635\\u062F\",\n    500: \"\\u067E\\u0627\\u0646\\u0635\\u062F\",\n    600: \"\\u0634\\u0634 \\u0635\\u062F\",\n    700: \"\\u0647\\u0641\\u062A \\u0635\\u062F\",\n    800: \"\\u0647\\u0634\\u062A \\u0635\\u062F\",\n    900: \"\\u0646\\u0647 \\u0635\\u062F\"\n  },\n  types = [\"\\u062A\\u0644\\u06CC\\u0627\\u0631\\u062F\", \"\\u0645\\u06CC\\u0644\\u06CC\\u0627\\u0631\\u062F\", \"\\u0645\\u06CC\\u0644\\u06CC\\u0648\\u0646\", \"\\u0647\\u0632\\u0627\\u0631\", \"\"],\n  decimalTypes = [\"\\u062F\\u0647\\u0645\", \"\\u0635\\u062F\\u0645\", \"\\u0647\\u0632\\u0627\\u0631\\u0645\", \"\\u062F\\u0647 \\u0647\\u0632\\u0627\\u0631\\u0645\"],\n  numbers = [],\n  decimals = [],\n  convert = function convert(a) {\n    var b = \"\",\n      c = \"\",\n      d = \"\",\n      e = \"\";\n    if (isPercent(a) && (a = a.replace(\"%\", \"\"), e = \" \\u062F\\u0631\\u0635\\u062F\"), a = getString(a), \"\" == a) return \"\";\n    if (sliceNumber(a), isNegative(a) && (b = \"\\u0645\\u0646\\u0641\\u06CC \"), a = a.replace(\"-\", \"\"), isDecimal(a)) {\n      var f = a.indexOf(\".\"),\n        g = \"\";\n      c = a.substr(f + 1, a.length), a = a.substr(0, f), g = parseInt(c).toString(), 1 === g.length && \"0\" != g ? (d += oneDigit[g] + \" \", d += decimalTypes[c.length - 1]) : (d = calculateDigits(decimals), d += \" \" + decimalTypes[c.length - 1]);\n    }\n    return 1 === a.length ? d ? \"0\" == a ? b + d + e : b + oneDigit[a] + \" \\u0645\\u0645\\u06CC\\u0632 \" + d + e : b + oneDigit[a] + e : d ? b + calculateDigits(numbers) + \" \\u0645\\u0645\\u06CC\\u0632 \" + d + e : b + calculateDigits(numbers) + e;\n  },\n  sliceNumber = function sliceNumber(a) {\n    var b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \",\",\n      c = \"\",\n      e = \"\",\n      f = \"\",\n      g = \"\",\n      h = \"\";\n    if (isPercent(a) && (a = a.replace(\"%\", \"\"), c = \"%\"), a = getString(a), \"\" == a) return \"\";\n    if (isNegative(a) && (e = \"-\"), a = a.replace(\"-\", \"\"), isDecimal(a)) {\n      var i = a.indexOf(\".\");\n      f = a.substr(i + 1, a.length), a = a.substr(0, i);\n    }\n    return (g = putSeparator(a, b), numbers = g.split(b), !f) ? e + g + c : (h = putSeparator(f, b), decimals = h.split(b), e + g + \".\" + h + c);\n  },\n  putSeparator = function putSeparator(a) {\n    var b = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : \",\";\n    if (\"string\" != typeof a) return \"\";\n    if (4 > a.length) return a;\n    for (var c = \"\", d = a.length - 1, e = 0; 0 <= d; d--) 3 == e && (c += b, e = 0), c += a[d], e++;\n    return c = c.split(\"\").reverse().join(\"\"), c;\n  },\n  calculateDigits = function calculateDigits(a) {\n    for (var b = Math.floor, c = \"\", d = 0; d < a.length; d++) {\n      var e = parseInt(a[d]),\n        f = e,\n        g = 100 * b(f / 100);\n      f %= 100;\n      var h = 10 * b(f / 10),\n        j = f % 10;\n      c += 0 != d && e ? \" \\u0648 \" : \"\", c += getPersian(g, h, j, d, a) + \" \" + getType(d, a);\n    }\n    return c.trim();\n  },\n  getPersian = function getPersian(a, b, c, d, e) {\n    var f = \"\",\n      g = b + c;\n    return (threeDigits[a] && (f += 0 < c || 0 < b ? threeDigits[a] + \" \\u0648 \" : threeDigits[a]), twoDigits[g]) ? (f += twoDigits[g] + \" \", f) : (twoDigits[b] && (f += twoDigits[b] + \" \\u0648 \"), 2 === e.length && 0 === d && 1 === c && 0 === b && 0 === a) ? f : 2 < e.length && d === e.length - 2 && 1 === c && 0 === b && 0 === a ? f : (0 < c && (f += oneDigit[c] + \" \"), f);\n  },\n  getType = function getType(a, b) {\n    var c = parseInt(b[a]);\n    if (isNaN(c)) return \"\";\n    if (!c) return \"\";\n    var d = b.length - a,\n      e = types.length - d;\n    return types[e];\n  },\n  isNegative = function isNegative(a) {\n    return (a = getString(a), !!a) && !(\"-\" != a[0]) && (a = a.replace(\"-\", \"\"), \"0\" != a);\n  },\n  isPercent = function isPercent(a) {\n    if (\"string\" != typeof a) return !1;\n    var b = a.indexOf(\"%\"),\n      c = a.lastIndexOf(\"%\");\n    return !(b != c) && 0 < b;\n  },\n  getString = function getString(a) {\n    return void 0 === a ? \"\" : null === a ? \"\" : isNaN(a) ? \"\" : \"number\" == typeof a ? a.toString() : a.trim();\n  },\n  isDecimal = function isDecimal(a) {\n    if (a = getString(a), \"\" == a) return !1;\n    var b = a.indexOf(\".\"),\n      c = a.lastIndexOf(\".\");\n    return b == c && 0 < b;\n  },\n  convertEnToPe = function convertEnToPe(a) {\n    if (null == a || a == null) return \"\";\n    \"number\" == typeof a && (a = a.toString());\n    for (var b = \"\", c = 0; c < a.length; c++) switch (a[c]) {\n      case \"0\":\n        b += \"\\u06F0\";\n        break;\n      case \"1\":\n        b += \"\\u06F1\";\n        break;\n      case \"2\":\n        b += \"\\u06F2\";\n        break;\n      case \"3\":\n        b += \"\\u06F3\";\n        break;\n      case \"4\":\n        b += \"\\u06F4\";\n        break;\n      case \"5\":\n        b += \"\\u06F5\";\n        break;\n      case \"6\":\n        b += \"\\u06F6\";\n        break;\n      case \"7\":\n        b += \"\\u06F7\";\n        break;\n      case \"8\":\n        b += \"\\u06F8\";\n        break;\n      case \"9\":\n        b += \"\\u06F9\";\n        break;\n      default:\n        b += a[c];\n    }\n    return b;\n  },\n  convertPeToEn = function convertPeToEn(a) {\n    if (null == a || a == null) return \"\";\n    for (var b = \"\", c = 0; c < a.length; c++) switch (a[c]) {\n      case \"\\u06F0\":\n        b += \"0\";\n        break;\n      case \"\\u06F1\":\n        b += \"1\";\n        break;\n      case \"\\u06F2\":\n        b += \"2\";\n        break;\n      case \"\\u06F3\":\n        b += \"3\";\n        break;\n      case \"\\u06F4\":\n        b += \"4\";\n        break;\n      case \"\\u06F5\":\n        b += \"5\";\n        break;\n      case \"\\u06F6\":\n        b += \"6\";\n        break;\n      case \"\\u06F7\":\n        b += \"7\";\n        break;\n      case \"\\u06F8\":\n        b += \"8\";\n        break;\n      case \"\\u06F9\":\n        b += \"9\";\n        break;\n      default:\n        b += a[c];\n    }\n    return b;\n  };\nmodule.exports = exports = {\n  convert: convert,\n  sliceNumber: sliceNumber,\n  convertEnToPe: convertEnToPe,\n  convertPeToEn: convertPeToEn\n};","map":{"version":3,"mappings":";;IAAMA,QAAQ,GAAG,CACf,oBADe,EAEf,cAFe,EAGf,cAHe,EAIf,cAJe,EAKf,0BALe,EAMf,oBANe,EAOf,cAPe,EAQf,oBARe,EASf,oBATe,EAUf,cAVe,C;EAYXC,SAAS,GAAG;IAChB,IAAI,cADY;IAEhB,IAAI,gCAFY;IAGhB,IAAI,sCAHY;IAIhB,IAAI,gCAJY;IAKhB,IAAI,sCALY;IAMhB,IAAI,sCANY;IAOhB,IAAI,sCAPY;IAQhB,IAAI,0BARY;IAShB,IAAI,0BATY;IAUhB,IAAI,gCAVY;IAWhB,IAAI,0BAXY;IAYhB,IAAI,cAZY;IAahB,IAAI,oBAbY;IAchB,IAAI,gCAdY;IAehB,IAAI,oBAfY;IAgBhB,IAAI,gCAhBY;IAiBhB,IAAI,gCAjBY;IAkBhB,IAAI;EAlBY,C;EAoBZC,WAAW,GAAG;IAClB,KAAK,cADa;IAElB,KAAK,gCAFa;IAGlB,KAAK,0BAHa;IAIlB,KAAK,sCAJa;IAKlB,KAAK,gCALa;IAMlB,KAAK,2BANa;IAOlB,KAAK,iCAPa;IAQlB,KAAK,iCARa;IASlB,KAAK;EATa,C;EAYdC,KAAK,GAAG,CAAC,sCAAD,EAAW,4CAAX,EAAsB,sCAAtB,EAAgC,0BAAhC,EAAwC,EAAxC,C;EACRC,YAAY,GAAG,CAAC,oBAAD,EAAQ,oBAAR,EAAe,gCAAf,EAAwB,6CAAxB,C;EACjBC,OAAO,GAAG,E;EACVC,QAAQ,GAAG,E;EAGTC,OAAO,GAAG,SAAVA,OAAU,EAAM,EAAI;IAAA,IACpBC,CAAQ,GAAG,EADS;MAEpBC,CAAS,GAAG,EAFQ;MAGpBC,CAAO,GAAG,EAHU;MAIpBC,CAAO,GAAG,EAJU;IAYxB,IANIC,SAAS,CAACC,CAAD,CAMb,KALEA,CAAM,GAAGA,CAAM,CAACC,OAAP,CAAe,GAAf,EAAoB,EAApB,CAKX,EAJEH,CAAO,GAAG,2BAIZ,GADAE,CAAM,GAAGE,SAAS,CAACF,CAAD,CAClB,EAAc,EAAV,KAAJ,EAAkB,OAAO,EAAP;IAKlB,IAJAG,WAAW,CAACH,CAAD,CAIX,EAHII,UAAU,CAACJ,CAAD,CAGd,KAHwBL,CAAQ,GAAG,2BAGnC,GAFAK,CAAM,GAAGA,CAAM,CAACC,OAAP,CAAe,GAAf,EAAoB,EAApB,CAET,EAAII,SAAS,CAACL,CAAD,CAAb,EAAuB;MAAA,IACjBM,CAAK,GAAGN,CAAM,CAACO,OAAP,CAAe,GAAf,CADS;QAEjBC,CAAY,GAAG,EAFE;MAIrBZ,CAAS,GAAGI,CAAM,CAACS,MAAP,CAAcH,CAAK,GAAG,CAAtB,EAAyBN,CAAM,CAACU,MAAhC,CAJS,EAKrBV,CAAM,GAAGA,CAAM,CAACS,MAAP,CAAc,CAAd,EAAiBH,CAAjB,CALY,EAMrBE,CAAY,GAAGG,QAAQ,CAACf,CAAD,CAAR,CAAoBgB,QAApB,EANM,EAQO,CAAxB,MAAY,CAACF,MAAb,IAA6C,GAAhB,KARZ,IASnBb,CAAO,IAAIV,QAAQ,CAACqB,CAAD,CAAR,GAAyB,GATjB,EAUnBX,CAAO,IAAIN,YAAY,CAACK,CAAS,CAACc,MAAV,GAAmB,CAApB,CAVJ,KAYnBb,CAAO,GAAGgB,eAAe,CAACpB,QAAD,CAZN,EAanBI,CAAO,IAAI,MAAMN,YAAY,CAACK,CAAS,CAACc,MAAV,GAAmB,CAApB,CAbV,CAetB;IAAA;IAhCuB,OAkCF,CAAlB,MAAM,CAACA,MAlCa,GAmCjBb,CAnCiB,GAuCR,GAAV,KAvCkB,GAwCbF,CAAQ,GAAGE,CAAX,GAAqBC,CAxCR,GA2CfH,CAAQ,GAAGR,QAAQ,CAACa,CAAD,CAAnB,GAA8B,4BAA9B,GAAyCH,CAAzC,GAAmDC,CA3CpC,GAoCbH,CAAQ,GAAGR,QAAQ,CAACa,CAAD,CAAnB,GAA8BF,CApCjB,GA8CnBD,CA9CmB,GAkDjBF,CAAQ,GAAGkB,eAAe,CAACrB,OAAD,CAA1B,GAAsC,4BAAtC,GAAiDK,CAAjD,GAA2DC,CAlD1C,GA+CfH,CAAQ,GAAGkB,eAAe,CAACrB,OAAD,CAA1B,GAAsCM,CAIhD;EAAA,C;EAGKK,WAAW,GAAG,SAAdA,WAAc,CAACH,CAAD,EAA6B;IAAA,IAApBL,CAAoB,oEAAR,GAAQ;MAC3CC,CAAO,GAAG,EADiC;MAE3CE,CAAG,GAAG,EAFqC;MAG3CQ,CAAI,GAAG,EAHoC;MAI3CE,CAAC,GAAG,EAJuC;MAK3CM,CAAC,GAAG,EALuC;IAc/C,IAPIf,SAAS,CAACC,CAAD,CAOb,KANEA,CAAM,GAAGA,CAAM,CAACC,OAAP,CAAe,GAAf,EAAoB,EAApB,CAMX,EALEL,CAAO,GAAG,GAKZ,GAFAI,CAAM,GAAGE,SAAS,CAACF,CAAD,CAElB,EAAc,EAAV,KAAJ,EAAkB,OAAO,EAAP;IAKlB,IAJII,UAAU,CAACJ,CAAD,CAId,KAJwBF,CAAG,GAAG,GAI9B,GAFAE,CAAM,GAAGA,CAAM,CAACC,OAAP,CAAe,GAAf,EAAoB,EAApB,CAET,EAAII,SAAS,CAACL,CAAD,CAAb,EAAuB;MACrB,IAAIe,CAAK,GAAGf,CAAM,CAACO,OAAP,CAAe,GAAf,CAAZ;MACAD,CAAI,GAAGN,CAAM,CAACS,MAAP,CAAcM,CAAK,GAAG,CAAtB,EAAyBf,CAAM,CAACU,MAAhC,CAFc,EAGrBV,CAAM,GAAGA,CAAM,CAACS,MAAP,CAAc,CAAd,EAAiBM,CAAjB,CACV;IAAA;IAvB8C,QAyB/CP,CAAC,GAAGQ,YAAY,CAAChB,CAAD,EAASL,CAAT,CAzB+B,EA0B/CH,OAAO,GAAGgB,CAAC,CAACS,KAAF,CAAQtB,CAAR,CA1BqC,EA4B3C,CAACW,CA5B0C,IA4B7BR,CAAG,GAAGU,CAAN,GAAUZ,CA5BmB,IA8B/CkB,CAAC,GAAGE,YAAY,CAACV,CAAD,EAAOX,CAAP,CA9B+B,EA+B/CF,QAAQ,GAAGqB,CAAC,CAACG,KAAF,CAAQtB,CAAR,CA/BoC,EAiCxCG,CAAG,GAAGU,CAAN,GAAU,GAAV,GAAgBM,CAAhB,GAAoBlB,CAjCoB,CAkChD;EAAA,C;EAGKoB,YAAY,GAAG,SAAfA,YAAe,CAAChB,CAAD,EAAgC;IAAA,IAApBL,CAAoB,oEAAR,GAAQ;IACnD,IAAyB,QAArB,WAAOK,CAAX,EAAmC,OAAO,EAAP;IACnC,IAAuB,CAAnB,IAAS,CAACU,MAAd,EAA0B,OAAOV,CAAP;IAG1B,SADIJ,CAAM,GAAG,EACb,EAASC,CAAC,GAAGG,CAAS,CAACU,MAAV,GAAmB,CAAhC,EAAmCZ,CAAO,GAAG,CAA7C,EAAqD,CAAL,KAAhD,EAAwDD,CAAC,EAAzD,EACiB,CAAX,KADN,KAEID,CAAM,IAAID,CAFd,EAGIG,CAAO,GAAG,CAHd,GAKEF,CAAM,IAAII,CAAS,CAACH,CAAD,CALrB,EAMEC,CAAO,EANT;IAaA,OAJAF,CAAM,GAAGA,CAAM,CACZqB,KADM,CACA,EADA,EAENC,OAFM,GAGNC,IAHM,CAGD,EAHC,CAIT,EAAOvB,CACR;EAAA,C;EAGKiB,eAAe,GAAG,SAAlBA,eAAkB,EAAM,EAAI;IAEhC,aAGeO,IAAI,CAACC,KAHpB,EADIzB,CAAM,GAAG,EACb,EAASC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,CAAM,CAACU,MAA3B,EAAmCb,CAAC,EAApC,EAAwC;MAAA,IAClCC,CAAS,GAAGa,QAAQ,CAACX,CAAM,CAACH,CAAD,CAAP,CADc;QAElCS,CAAM,GAAGR,CAFyB;QAGlCU,CAAM,GAA8B,GAA3B,KAAWF,CAAM,GAAG,GAApB,CAHyB;MAItCA,CAJsC,IAIpB,GAJoB;MAAA,IAKlCQ,CAAM,GAA6B,EAA1B,KAAWR,CAAM,GAAG,EAApB,CALyB;QAMlCgB,CAAK,GAAGhB,CAAM,GAAG,EANiB;MAOtCV,CAAM,IAAU,CAAN,KAAC,IAAUE,CAAX,GAAuB,UAAvB,GAA+B,EAPH,EAStCF,CAAM,IACJ2B,UAAU,CAACf,CAAD,EAASM,CAAT,EAAiBQ,CAAjB,EAAwBzB,CAAxB,EAA2BG,CAA3B,CAAV,GAA+C,GAA/C,GAAqDwB,OAAO,CAAC3B,CAAD,EAAIG,CAAJ,CAC/D;IAAA;IAED,OAAOJ,CAAM,CAAC6B,IAAP,EACR;EAAA,C;EAGKF,UAAU,GAAG,SAAbA,UAAa,CAACvB,CAAD,EAASL,CAAT,EAAiBC,CAAjB,EAAwBC,CAAxB,EAA+BC,CAA/B,EAA2C;IAAA,IAExDQ,CAAM,GAAG,EAF+C;MAGxDE,CAAe,GAAGb,CAAM,GAAGC,CAH6B;IAAA,QAKxDP,WAAW,CAACW,CAAD,CAL6C,KAM1DM,CAAM,IACI,CAAR,IAAK,IAAiB,CAAT,IAAb,GACIjB,WAAW,CAACW,CAAD,CAAX,GAAsB,UAD1B,GAEIX,WAAW,CAACW,CAAD,CATyC,GAYxDZ,SAAS,CAACoB,CAAD,CAZ+C,KAa1DF,CAAM,IAAIlB,SAAS,CAACoB,CAAD,CAAT,GAA6B,GAbmB,EAcnDF,CAdmD,KAiBxDlB,SAAS,CAACO,CAAD,CAjB+C,KAkB1DW,CAAM,IAAIlB,SAAS,CAACO,CAAD,CAAT,GAAoB,UAlB4B,GAsBvC,CAAnB,MAAO,CAACe,MAAR,IACU,CAAV,MADA,IAEU,CAAV,MAFA,IAGW,CAAX,MAHA,IAIW,CAAX,MA1B0D,IA4BnDJ,CA5BmD,GAgCzC,CAAjB,IAAO,CAACI,MAAR,IACAb,CAAK,KAAKC,CAAO,CAACY,MAAR,GAAiB,CAD3B,IAEU,CAAV,MAFA,IAGW,CAAX,MAHA,IAIW,CAAX,MApC0D,GAsCnDJ,CAtCmD,IAyChD,CAAR,IAzCwD,KAyC7CA,CAAM,IAAInB,QAAQ,CAACS,CAAD,CAAR,GAAkB,GAzCiB,GA2CrDU,CA3CqD,CA4C7D;EAAA,C;EAGKkB,OAAO,GAAG,SAAVA,OAAU,CAACxB,CAAD,EAAIL,CAAJ,EAAgB;IAC9B,IAAIC,CAAS,GAAGe,QAAQ,CAAChB,CAAO,CAACK,CAAD,CAAR,CAAxB;IACA,IAAI0B,KAAK,CAAC9B,CAAD,CAAT,EAAsB,OAAO,EAAP;IACtB,IAAI,CAACA,CAAL,EAAgB,OAAO,EAAP;IAHc,IAI1BC,CAAM,GAAGF,CAAO,CAACe,MAAR,GAAiBV,CAJA;MAK1BF,CAAK,GAAGR,KAAK,CAACoB,MAAN,GAAeb,CALG;IAM9B,OAAOP,KAAK,CAACQ,CAAD,CACb;EAAA,C;EAGKM,UAAU,GAAG,SAAbA,UAAa,EAAM,EAAI;IAAA,QAC3BJ,CAAM,GAAGE,SAAS,CAACF,CAAD,CADS,GAEvB,CAACA,CAFsB,OAGV,GAAb,KAAM,CAAC,CAAD,CAHiB,MAI3BA,CAAM,GAAGA,CAAM,CAACC,OAAP,CAAe,GAAf,EAAoB,EAApB,CAJkB,EAKV,GAAV,KALoB,CAM5B;EAAA,C;EAGKF,SAAS,GAAG,SAAZA,SAAY,EAAM,EAAI;IAC1B,IAAsB,QAAlB,WAAOC,CAAX,EAAgC;IADN,IAEtBL,CAAK,GAAGK,CAAM,CAACO,OAAP,CAAe,GAAf,CAFc;MAGtBX,CAAM,GAAGI,CAAM,CAAC2B,WAAP,CAAmB,GAAnB,CAHa;IAAA,SAItBhC,CAAK,IAAIC,CAJa,KAKX,CAAR,IACR;EAAA,C;EAGKM,SAAS,GAAG,SAAZA,SAAY,EAAM,EAAI;IAAA,OACtB,YADsB,GACO,EADP,GAEX,IAAX,MAFsB,GAEE,EAFF,GAGtBwB,KAAK,CAAC1B,CAAD,CAHiB,GAGA,EAHA,GAIJ,QAAlB,WAAOA,CAJe,GAIaA,CAAM,CAACY,QAAP,EAJb,GAKnBZ,CAAM,CAACyB,IAAP,EACR;EAAA,C;EAGKpB,SAAS,GAAG,SAAZA,SAAY,EAAM,EAAI;IAE1B,IADAL,CAAM,GAAGE,SAAS,CAACF,CAAD,CAClB,EAAc,EAAV,KAAJ,EAAkB;IAFQ,IAGtBL,CAAK,GAAGK,CAAM,CAACO,OAAP,CAAe,GAAf,CAHc;MAItBX,CAAM,GAAGI,CAAM,CAAC2B,WAAP,CAAmB,GAAnB,CAJa;IAAA,OAKtBhC,CAAK,IAAIC,CALa,IAMX,CAAR,IACR;EAAA,C;EAEKgC,aAAa,GAAG,SAAhBA,aAAgB,EAAM,EAAI;IAC9B,IAAc,IAAV,KAAM,IAAY5B,CAAM,QAA5B,EAA2C,OAAO,EAAP;IACtB,QAAjB,WAAOA,CAFmB,KAECA,CAAM,GAAGA,CAAM,CAACY,QAAP,EAFV;IAI9B,SADIjB,CAAG,GAAG,EACV,EAASC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,CAAM,CAACU,MAA3B,EAAmCd,CAAC,EAApC,EACE,QAAQI,CAAM,CAACJ,CAAD,CAAd;MACE,KAAK,GAAL;QACED,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF,KAAK,GAAL;QACEA,CAAG,IAAI,QADT;QAEE;MACF;QACEA,CAAG,IAAIK,CAAM,CAACJ,CAAD,CADf;IA/BF;IAmCF,OAAOD,CACR;EAAA,C;EAEKkC,aAAa,GAAG,SAAhBA,aAAgB,EAAM,EAAI;IAC9B,IAAc,IAAV,KAAM,IAAY7B,CAAM,QAA5B,EAA2C,OAAO,EAAP;IAE3C,SADIL,CAAG,GAAG,EACV,EAASC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,CAAM,CAACU,MAA3B,EAAmCd,CAAC,EAApC,EACE,QAAQI,CAAM,CAACJ,CAAD,CAAd;MACE,KAAK,QAAL;QACED,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF,KAAK,QAAL;QACEA,CAAG,IAAI,GADT;QAEE;MACF;QACEA,CAAG,IAAIK,CAAM,CAACJ,CAAD,CADf;IA/BF;IAmCF,OAAOD,CACR;EAAA,C;AAEDmC,MAAM,CAACC,OAAP,GAAiBA,OAAO,GAAG;EACzBrC,OAAO,EAAPA,OADyB;EAEzBS,WAAW,EAAXA,WAFyB;EAGzByB,aAAa,EAAbA,aAHyB;EAIzBC,aAAa,EAAbA;AAJyB,C","names":["oneDigit","twoDigits","threeDigits","types","decimalTypes","numbers","decimals","convert","b","c","d","e","isPercent","a","replace","getString","sliceNumber","isNegative","isDecimal","f","indexOf","g","substr","length","parseInt","toString","calculateDigits","h","i","putSeparator","split","reverse","join","Math","floor","j","getPersian","getType","trim","isNaN","lastIndexOf","convertEnToPe","convertPeToEn","module","exports"],"sources":["/Users/nnb/My-Applications/p26-project/node_modules/persian-number/src/persianNumber.js"],"sourcesContent":["const oneDigit = [\r\n  \"صفر\",\r\n  \"یک\",\r\n  \"دو\",\r\n  \"سه\",\r\n  \"چهار\",\r\n  \"پنج\",\r\n  \"شش\",\r\n  \"هفت\",\r\n  \"هشت\",\r\n  \"نه\"\r\n];\r\nconst twoDigits = {\r\n  10: \"ده\",\r\n  11: \"یازده\",\r\n  12: \"دوازده\",\r\n  13: \"سیزده\",\r\n  14: \"چهارده\",\r\n  15: \"پانزده\",\r\n  16: \"شانزده\",\r\n  17: \"هفده\",\r\n  18: \"هجده\",\r\n  19: \"نوزده\",\r\n  20: \"بیست\",\r\n  30: \"سی\",\r\n  40: \"چهل\",\r\n  50: \"پنجاه\",\r\n  60: \"شصت\",\r\n  70: \"هفتاد\",\r\n  80: \"هشتاد\",\r\n  90: \"نود\"\r\n};\r\nconst threeDigits = {\r\n  100: \"صد\",\r\n  200: \"دویست\",\r\n  300: \"سیصد\",\r\n  400: \"چهارصد\",\r\n  500: \"پانصد\",\r\n  600: \"شش صد\",\r\n  700: \"هفت صد\",\r\n  800: \"هشت صد\",\r\n  900: \"نه صد\"\r\n};\r\n\r\nconst types = [\"تلیارد\", \"میلیارد\", \"میلیون\", \"هزار\", \"\"];\r\nconst decimalTypes = [\"دهم\", \"صدم\", \"هزارم\", \"ده هزارم\"];\r\nlet numbers = [];\r\nlet decimals = [];\r\n\r\n//Convert Number To Words\r\nconst convert = number => {\r\n  let negative = \"\";\r\n  let decNumber = \"\";\r\n  let decimal = \"\";\r\n  let percent = \"\";\r\n\r\n  if (isPercent(number)) {\r\n    number = number.replace(\"%\", \"\");\r\n    percent = \" درصد\";\r\n  }\r\n\r\n  number = getString(number);\r\n  if (number == \"\") return \"\";\r\n  sliceNumber(number);\r\n  if (isNegative(number)) negative = \"منفی \";\r\n  number = number.replace(\"-\", \"\");\r\n\r\n  if (isDecimal(number)) {\r\n    let index = number.indexOf(\".\");\r\n    let decNumberStr = \"\";\r\n\r\n    decNumber = number.substr(index + 1, number.length);\r\n    number = number.substr(0, index);\r\n    decNumberStr = parseInt(decNumber).toString();\r\n\r\n    if (decNumberStr.length === 1 && decNumberStr != \"0\") {\r\n      decimal += oneDigit[decNumberStr] + \" \";\r\n      decimal += decimalTypes[decNumber.length - 1];\r\n    } else {\r\n      decimal = calculateDigits(decimals);\r\n      decimal += \" \" + decimalTypes[decNumber.length - 1];\r\n    }\r\n  }\r\n\r\n  if (number.length === 1) {\r\n    if (!decimal) {\r\n      return negative + oneDigit[number] + percent;\r\n    }\r\n\r\n    if (number == \"0\") {\r\n      return negative + decimal + percent;\r\n    }\r\n\r\n    return negative + oneDigit[number] + \" ممیز \" + decimal + percent;\r\n  }\r\n\r\n  if (!decimal) {\r\n    return negative + calculateDigits(numbers) + percent;\r\n  }\r\n\r\n  return negative + calculateDigits(numbers) + \" ممیز \" + decimal + percent;\r\n};\r\n\r\n//split number 3 by 3 with a separator (123456789.3025=>123,456,789.3,025) Do Not Give It Persian Numbers\r\nconst sliceNumber = (number, separator = \",\") => {\r\n  let percent = \"\";\r\n  let neg = \"\";\r\n  let dNum = \"\";\r\n  let n = \"\";\r\n  let d = \"\";\r\n\r\n  if (isPercent(number)) {\r\n    number = number.replace(\"%\", \"\");\r\n    percent = \"%\";\r\n  }\r\n\r\n  number = getString(number);\r\n\r\n  if (number == \"\") return \"\";\r\n  if (isNegative(number)) neg = \"-\";\r\n\r\n  number = number.replace(\"-\", \"\");\r\n\r\n  if (isDecimal(number)) {\r\n    let index = number.indexOf(\".\");\r\n    dNum = number.substr(index + 1, number.length);\r\n    number = number.substr(0, index);\r\n  }\r\n\r\n  n = putSeparator(number, separator);\r\n  numbers = n.split(separator);\r\n\r\n  if (!dNum) return neg + n + percent;\r\n\r\n  d = putSeparator(dNum, separator);\r\n  decimals = d.split(separator);\r\n\r\n  return neg + n + \".\" + d + percent;\r\n};\r\n\r\n//Puts a separator between the chunks of the given numString.\r\nconst putSeparator = (numString, separator = \",\") => {\r\n  if (typeof numString !== \"string\") return \"\";\r\n  if (numString.length < 4) return numString;\r\n\r\n  let result = \"\";\r\n  for (let i = numString.length - 1, counter = 0; i >= 0; i--) {\r\n    if (counter == 3) {\r\n      result += separator;\r\n      counter = 0;\r\n    }\r\n    result += numString[i];\r\n    counter++;\r\n  }\r\n\r\n  result = result\r\n    .split(\"\")\r\n    .reverse()\r\n    .join(\"\");\r\n  return result;\r\n};\r\n\r\n//Processing on Digits of A Number\r\nconst calculateDigits = arrNum => {\r\n  let result = \"\";\r\n  for (let i = 0; i < arrNum.length; i++) {\r\n    let parsedNum = parseInt(arrNum[i]);\r\n    let number = parsedNum;\r\n    let sadgan = Math.floor(number / 100) * 100;\r\n    number = number % 100;\r\n    let dahgan = Math.floor(number / 10) * 10;\r\n    let yekan = number % 10;\r\n    result += i !== 0 && parsedNum ? \" و \" : \"\";\r\n\r\n    result +=\r\n      getPersian(sadgan, dahgan, yekan, i, arrNum) + \" \" + getType(i, arrNum);\r\n  }\r\n\r\n  return result.trim();\r\n};\r\n\r\n//Main Process That Turn a Number Into a String(122=>100+20+2)\r\nconst getPersian = (sadgan, dahgan, yekan, index, numbers) => {\r\n  let flag = false;\r\n  let result = \"\";\r\n  let dahganPlusYekan = dahgan + yekan;\r\n\r\n  if (threeDigits[sadgan]) {\r\n    result +=\r\n      yekan > 0 || dahgan > 0\r\n        ? threeDigits[sadgan] + \" و \"\r\n        : threeDigits[sadgan];\r\n  }\r\n\r\n  if (twoDigits[dahganPlusYekan]) {\r\n    result += twoDigits[dahganPlusYekan] + \" \";\r\n    return result;\r\n  }\r\n\r\n  if (twoDigits[dahgan]) {\r\n    result += twoDigits[dahgan] + \" و \";\r\n  }\r\n\r\n  if (\r\n    numbers.length === 2 &&\r\n    index === 0 &&\r\n    yekan === 1 &&\r\n    dahgan === 0 &&\r\n    sadgan === 0\r\n  ) {\r\n    return result;\r\n  }\r\n\r\n  if (\r\n    numbers.length > 2 &&\r\n    index === numbers.length - 2 &&\r\n    yekan === 1 &&\r\n    dahgan === 0 &&\r\n    sadgan === 0\r\n  ) {\r\n    return result;\r\n  }\r\n\r\n  if (yekan > 0) result += oneDigit[yekan] + \" \";\r\n\r\n  return result;\r\n};\r\n\r\n//getting The Type Of Each Number (Billion, Million,...)\r\nconst getType = (i, numbers) => {\r\n  let parsedNum = parseInt(numbers[i]);\r\n  if (isNaN(parsedNum)) return \"\";\r\n  if (!parsedNum) return \"\";\r\n  let length = numbers.length - i;\r\n  let index = types.length - length;\r\n  return types[index];\r\n};\r\n\r\n//Calculate if number:String is Negative Or Not\r\nconst isNegative = number => {\r\n  number = getString(number);\r\n  if (!number) return false;\r\n  if (number[0] != \"-\") return false;\r\n  number = number.replace(\"-\", \"\");\r\n  return number != \"0\";\r\n};\r\n\r\n//Calculate if number:String has '%' as Percent\r\nconst isPercent = string => {\r\n  if (typeof string !== \"string\") return false;\r\n  let index = string.indexOf(\"%\");\r\n  let lIndex = string.lastIndexOf(\"%\");\r\n  if (index != lIndex) return false;\r\n  return index > 0;\r\n};\r\n\r\n//is number:String:Number is a Valid Number? if type is Number turn it to String And Return it\r\nconst getString = number => {\r\n  if (number === undefined) return \"\";\r\n  if (number === null) return \"\";\r\n  if (isNaN(number)) return \"\";\r\n  if (typeof number === \"number\") return number.toString();\r\n  return number.trim();\r\n};\r\n\r\n//Calculate if number:String has Decimal Point Or Not\r\nconst isDecimal = number => {\r\n  number = getString(number);\r\n  if (number == \"\") return false;\r\n  let index = number.indexOf(\".\");\r\n  let lIndex = number.lastIndexOf(\".\");\r\n  if (index != lIndex) return false;\r\n  return index > 0;\r\n};\r\n//Convert English Numbers To Persian Numbers\r\nconst convertEnToPe = number => {\r\n  if (number == null || number == undefined) return \"\";\r\n  if (typeof number == \"number\") number = number.toString();\r\n  let res = \"\";\r\n  for (let i = 0; i < number.length; i++) {\r\n    switch (number[i]) {\r\n      case \"\\u0030\":\r\n        res += \"\\u06F0\";\r\n        break;\r\n      case \"\\u0031\":\r\n        res += \"\\u06F1\";\r\n        break;\r\n      case \"\\u0032\":\r\n        res += \"\\u06F2\";\r\n        break;\r\n      case \"\\u0033\":\r\n        res += \"\\u06F3\";\r\n        break;\r\n      case \"\\u0034\":\r\n        res += \"\\u06F4\";\r\n        break;\r\n      case \"\\u0035\":\r\n        res += \"\\u06F5\";\r\n        break;\r\n      case \"\\u0036\":\r\n        res += \"\\u06F6\";\r\n        break;\r\n      case \"\\u0037\":\r\n        res += \"\\u06F7\";\r\n        break;\r\n      case \"\\u0038\":\r\n        res += \"\\u06F8\";\r\n        break;\r\n      case \"\\u0039\":\r\n        res += \"\\u06F9\";\r\n        break;\r\n      default:\r\n        res += number[i];\r\n    }\r\n  }\r\n  return res;\r\n};\r\n//Convert Persian Numbers To English Numbers\r\nconst convertPeToEn = number => {\r\n  if (number == null || number == undefined) return \"\";\r\n  let res = \"\";\r\n  for (let i = 0; i < number.length; i++) {\r\n    switch (number[i]) {\r\n      case \"\\u06F0\":\r\n        res += \"\\u0030\";\r\n        break;\r\n      case \"\\u06F1\":\r\n        res += \"\\u0031\";\r\n        break;\r\n      case \"\\u06F2\":\r\n        res += \"\\u0032\";\r\n        break;\r\n      case \"\\u06F3\":\r\n        res += \"\\u0033\";\r\n        break;\r\n      case \"\\u06F4\":\r\n        res += \"\\u0034\";\r\n        break;\r\n      case \"\\u06F5\":\r\n        res += \"\\u0035\";\r\n        break;\r\n      case \"\\u06F6\":\r\n        res += \"\\u0036\";\r\n        break;\r\n      case \"\\u06F7\":\r\n        res += \"\\u0037\";\r\n        break;\r\n      case \"\\u06F8\":\r\n        res += \"\\u0038\";\r\n        break;\r\n      case \"\\u06F9\":\r\n        res += \"\\u0039\";\r\n        break;\r\n      default:\r\n        res += number[i];\r\n    }\r\n  }\r\n  return res;\r\n};\r\n\r\nmodule.exports = exports = {\r\n  convert,\r\n  sliceNumber,\r\n  convertEnToPe,\r\n  convertPeToEn\r\n};\r\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}